// ============================================================================
// CORRECTED: api/create-invite.js (Vercel Function)
// ============================================================================
// Implements invite creation logic directly (no Supabase Edge Function proxy)
// ============================================================================

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { userToken, role = 'member' } = req.body;

  if (!userToken) {
    return res.status(400).json({ error: 'User token required' });
  }

  // Validate role
  if (!['member', 'bestie'].includes(role)) {
    return res.status(400).json({
      error: 'Invalid role. Must be "member" or "bestie"'
    });
  }

  try {
    // Create user-authenticated client
    const supabaseUser = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY,
      {
        global: {
          headers: {
            Authorization: `Bearer ${userToken}`
          }
        }
      }
    );

    // Get authenticated user
    const { data: { user }, error: userError } = await supabaseUser.auth.getUser();
    if (userError || !user) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    // Get user's wedding (must be owner to create invites)
    const { data: membership, error: memberError } = await supabase
      .from('wedding_members')
      .select('wedding_id, role')
      .eq('user_id', user.id)
      .single();

    if (memberError || !membership) {
      return res.status(404).json({ error: 'No wedding found' });
    }

    // Only owners can create invites
    if (membership.role !== 'owner') {
      return res.status(403).json({
        error: 'Only wedding owners can create invites'
      });
    }

    // Generate unique invite code
    const code = generateInviteCode();

    // Create invite with role
    const { data: invite, error: inviteError } = await supabase
      .from('invite_codes')
      .insert({
        wedding_id: membership.wedding_id,
        code: code,
        created_by: user.id,
        role: role  // 'member' or 'bestie'
      })
      .select()
      .single();

    if (inviteError) {
      console.error('Error creating invite:', inviteError);
      return res.status(500).json({ error: 'Failed to create invite' });
    }

    return res.status(200).json({
      success: true,
      inviteCode: invite.code,
      role: invite.role,
      weddingId: invite.wedding_id
    });

  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ error: error.message });
  }
}

function generateInviteCode() {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; // Avoid confusing chars
  let code = '';
  for (let i = 0; i < 8; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}
