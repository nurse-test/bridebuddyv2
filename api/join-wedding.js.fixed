// ============================================================================
// CORRECTED: api/join-wedding.js (Vercel Function)
// ============================================================================
// Implements join wedding logic directly (no Supabase Edge Function proxy)
// ============================================================================

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { inviteCode, userToken } = req.body;

  if (!inviteCode || !userToken) {
    return res.status(400).json({ error: 'Invite code and user token required' });
  }

  try {
    // Create user-authenticated client
    const supabaseUser = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY,
      {
        global: {
          headers: {
            Authorization: `Bearer ${userToken}`
          }
        }
      }
    );

    // Get authenticated user
    const { data: { user }, error: userError } = await supabaseUser.auth.getUser();
    if (userError || !user) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    // Look up invite code
    const { data: invite, error: inviteError } = await supabase
      .from('invite_codes')
      .select('*')
      .eq('code', inviteCode.toUpperCase())
      .eq('is_used', false)
      .single();

    if (inviteError || !invite) {
      return res.status(404).json({
        error: 'Invalid or already used invite code'
      });
    }

    // Check if user is already a member of this wedding
    const { data: existingMember } = await supabase
      .from('wedding_members')
      .select('*')
      .eq('wedding_id', invite.wedding_id)
      .eq('user_id', user.id)
      .single();

    if (existingMember) {
      return res.status(400).json({
        error: 'You are already a member of this wedding'
      });
    }

    // Add user to wedding with the role from the invite
    const { error: memberError } = await supabase
      .from('wedding_members')
      .insert({
        wedding_id: invite.wedding_id,
        user_id: user.id,
        role: invite.role  // Use role from invite ('member' or 'bestie')
      });

    if (memberError) {
      console.error('Error adding member:', memberError);
      return res.status(500).json({ error: 'Failed to join wedding' });
    }

    // Mark invite as used
    const { error: updateError } = await supabase
      .from('invite_codes')
      .update({
        is_used: true,
        used_by: user.id,
        used_at: new Date().toISOString()
      })
      .eq('code', inviteCode.toUpperCase());

    if (updateError) {
      console.error('Error updating invite:', updateError);
      // Non-fatal - member was added successfully
    }

    return res.status(200).json({
      success: true,
      weddingId: invite.wedding_id,
      role: invite.role,
      message: `Successfully joined wedding as ${invite.role}`
    });

  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ error: error.message });
  }
}
